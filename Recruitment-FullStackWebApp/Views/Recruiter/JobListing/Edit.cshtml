@model JobEditViewModel

@{
    ViewData["Title"] = "Edit Job";
}

<h2>Edit Job</h2>

<form asp-action="Edit" method="post" id="editForm">
    <input type="hidden" asp-for="Id" id="JobId"/>

    <div class="mb-3">
        <label asp-for="Title" class="form-label">Job Title</label>
        <input asp-for="Title" class="form-control" required />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Location" class="form-label">Location</label>
        <input asp-for="Location" class="form-control" required />
        <span asp-validation-for="Location" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Salary" class="form-label">Salary</label>
        <input asp-for="Salary" type="number" class="form-control" required />
        <span asp-validation-for="Salary" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="JobType" class="form-label">Category Job Type</label>
        <select class="form-control" id="Category" name="JobType">
        </select>
        <span asp-validation-for="JobType" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Description" class="form-label">Description</label>
        <textarea asp-for="Description" class="form-control" rows="4" required></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>

    <button type="submit" class="btn btn-primary">Update Job</button>
    <a asp-action="Index" class="btn btn-secondary">Cancel</a>
</form>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>

<script type="text/javascript">
    function fetchJobCategories() {
        const token = localStorage.getItem('authToken');
        const email = localStorage.getItem("email");
        if (!email) {
            alert("Email not found in localStorage.");
            return;
        }

        const currentJobTypeId = @Model.JobType;

        fetch('/recruiter/jobtype/all', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
            },
        })
            .then(response => response.json())
            .then(data => {
                if (data && data.jobTypes && data.jobTypes.length > 0) {
                    const categorySelect = document.getElementById('Category');
                    categorySelect.innerHTML = '';
                    data.jobTypes.forEach(type => {
                        const option = document.createElement('option');
                        option.value = type.id;
                        option.textContent = type.name;
                        if (type.id === currentJobTypeId) {
                            option.selected = true; 
                        }
                        categorySelect.appendChild(option);
                    });
                } else {
                    toastr.error('No job categories found.');
                }
            })
            .catch(error => {
                toastr.error('An error occurred while fetching job categories.');
                console.error('Error:', error);
            });
    }

    fetchJobCategories();

    document.getElementById('editForm').addEventListener('submit', function (event) {
        event.preventDefault();
        var formData = new FormData(document.getElementById('editForm'));
        const token = localStorage.getItem('authToken');
        const email = localStorage.getItem("email");
        if (!email) {
            alert("Email not found in localStorage.");
            return;
        }
        const jobId = document.getElementById("JobId").value;

        fetch(`/recruiter/${jobId}?email=${email}`, {
            method: 'PUT',
            body: formData,
            headers: {
                'Authorization': `Bearer ${token}`
            },
        })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(data => { throw new Error(data.message || 'Something went wrong') });
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    toastr.success('Successfully update data! Redirecting...', 'Success');
                    setTimeout(function () {
                        window.location.href = '/recruiter';
                    }, 1000)
                }
            })
            .catch(error => {
                toastr.error(error.message || 'An error occurred while processing.');
                console.error('Error:', error);
            });
    });
</script>

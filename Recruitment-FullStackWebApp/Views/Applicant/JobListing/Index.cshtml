@model JobViewModel
@{
    ViewData["Title"] = "Job Listings";
}

<h2>@ViewData["Title"]</h2>

<!-- Search Form -->
<form id="searchForm" class="form-inline mb-3" method="get" action="/applicant">
    <div class="form-group">
        <label for="searchTitle" class="mr-2">Title</label>
        <input type="text" class="form-control" id="searchTitle" name="title" placeholder="Search by Title" />
    </div>
    <br />
    <div class="form-group ml-2">
        <label for="searchLocation" class="mr-2">Location</label>
        <input type="text" class="form-control" id="searchLocation" name="location" placeholder="Search by Location" />
    </div>
    <br />
    <button type="submit" class="btn btn-primary ml-2">Search</button>
    <button type="submit" class="btn btn-danger ml-2" id="clearBtn">Clear</button>
</form>

@if (Model != null && Model.Jobs.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Job Title</th>
                <th>Description</th>
                <th>Location</th>
                <th>Salary</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var job in Model.Jobs)
            {
                <tr>
                    <td>@job.Title</td>
                    <td>@job.Description</td>
                    <td>@job.Location</td>
                    <td>@job.Salary.ToString("C")</td>
                    <td>
                        <button class="btn btn-primary" onclick="applyJob(@job.Id)">
                            Apply
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="pagination-controls mt-4">
        @if (Model.HasPreviousPage)
        {
            <a asp-action="Index" asp-route-pageNumber="@(Model.PageNumber - 1)" class="btn btn-secondary">
                Previous
            </a>
        }

        <span>Page @Model.PageNumber of @Model.TotalPages</span>

        @if (Model.HasNextPage)
        {
            <a asp-action="Index" asp-route-pageNumber="@(Model.PageNumber + 1)" class="btn btn-secondary">
                Next
            </a>
        }
    </div>
}
else
{
    <p>No jobs available at the moment.</p>
}


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>

<script>
    var state = true
    const token = localStorage.getItem('authToken');

    function checkProfile() {
        const email = localStorage.getItem('email');
        if (!email) {
            alert('You must log in to apply for a job.');
            return;
        }

        fetch(`/applicant/profile/data`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`
            }
        })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(data => { throw new Error(data.message || 'Something went wrong'); });
                }
                return response.json();
            })
            .then(data => {
                if (!data.success) {
                    state = false
                    toastr.error('Please fill the profile first.');
                } 
            })
            .catch(error => {
                console.error('Error:', error);
                // alert(error.message || 'An error occurred.');
            });
    }

    function applyForJob(jobId) {
        const jobApplicationCommand = {
            JobId: jobId,
            ApplicationDate: new Date().toISOString(),
            Status: 0
        };

        fetch(`/applicant/apply`, {
            method: 'POST',
            body: JSON.stringify(jobApplicationCommand),
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
        })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(data => { throw new Error(data.message || 'Something went wrong') });
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    toastr.success('Successfully applied to job! Redirecting...', 'Success');
                    setTimeout(function () {
                        window.location.href = '/applicant';
                    }, 1000)
                }
            })
            .catch(error => {
                toastr.error(error.message || 'An error occurred while processing.');
                console.error('Error:', error);
            });
    }

    function applyJob(jobId) {
        checkProfile();
        if(state) {
            applyForJob(jobId);
        }
    }

    document.getElementById('clearBtn').addEventListener('click', function () {
        document.getElementById('searchTitle').value = '';
        document.getElementById('searchLocation').value = '';
        document.getElementById('searchForm').submit();
    });
</script>
